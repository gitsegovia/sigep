.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TTF2PT1_CONVERT 1"
.TH TTF2PT1_CONVERT 1 "December 31, 2003" "version 3.4.4" "TTF2PT1 Font Converter"
.SH "NAME"
\&\fBttf2pt1_convert\fR \- convenience font conversion script
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ttf2pt1_convert \fB[config\-file]\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
`\fBConvert\fR' is the master conversion script provided with ttf2pt1. 
When installed into a public directory it's named `\fBttf2pt1_convert\fR' 
to avoid name collisions with the other programs.
.PP
If the configuration file is not specified as an argument then the file
`\f(CW\*(C`convert.cfg\*(C'\fR' in the current directory is used. This file contains
a set of configuration variables. The distribution contains a sample file
file `\f(CW\*(C`convert.cfg.sample\*(C'\fR'. Please copy it to `\f(CW\*(C`convert.cfg\*(C'\fR',
look inside it and change the configuration variables. The more stable
configuration variables, such as the path names of the scripts and
encoding files are located in `\f(CW\*(C`convert\*(C'\fR' itself, they are
automatically updated when installing \fBttf2pt1\fR.
.PP
Put all the \s-1TTF\s0 fonts you want to convert into some directory (this
may be just the directory that already contains all the Windows
fonts on a mounted \s-1FAT\s0 filesystem). If you have fonts in different
source encoding then put the fonts in each of the encodings
into a separate directory. Up to 10 source directories are
supported. If you (in a rather unlikely case) have more source
directories then you can make two separate runs of the converter,
converting up to 10 directories at a time.
.PP
The variables in the configuration file are:
.IP "\(bu" 2
\&\fB\f(CB\*(C`SRCDIRS\*(C'\fB\fR \- the list of directories (with absolute paths) with 
\&\s-1TTF\s0 fonts. Each line contains at least 3 fields: the name of the directory,
the language of the fonts in it (if you have fonts for different 
languages you have to put them into the separate directories) and the
encoding of the fonts. Again, if you have some of the \s-1TTF\s0 typefaces in 
one encoding, and some in another (say, \s-1CP\-1251\s0 and \s-1KOI\-8\s0), you have 
to put them into the separate source directories. Some lines may contain
4 fields. Then the fourth field is the name of the external map to
convert the Unicode fonts into the desirable encoding. This map is
used instead of the built-in map for the specified language.
.Sp
*8*
An interesting thing is that some languages have more than one
widely used character encodings. For example, the widely used
encodings for Russian are \s-1IBM\s0 \s-1CP\-866\s0 (\s-1MS\-DOS\s0 and Unix), \s-1KOI\-8\s0
(Unix and \s-1VAX\s0, also the standard Internet encoding), \s-1IBM\s0 \s-1CP\-1251\s0 (\s-1MS\s0 Windows).
That's why I have provided the means to generate the converted fonts
in more than one encoding. See the file encodings/README for 
details about the encoding tables. Actually, if you plan to use
these fonts with Netscape Navigator better use the aliases
cp\-866 instead of ibm\-866 and windows\-1251 instead of ibm\-1251
because that's what Netscape wants.
.IP "\(bu" 2
\&\fB\f(CB\*(C`DSTDIR\*(C'\fB\fR \- directory for the resulting Type1 fonts. Be careful!
This directory gets completely wiped out before conversion,
so don't use any already existing directory for this purpose.
.IP "\(bu" 2
\&\fB\f(CB\*(C`DSTENC\f(CB{language}\f(CB\*(C'\fB\fR \- the list of encodings in which the destination 
fonts will be generated for each language. Each font of that 
language will be generated in each of the specified
encodings. If you don't want any translation, just specify both
\&\f(CW\*(C`SRCENC\*(C'\fR and \f(CW\*(C`DSTENC\*(C'\fR as iso8859\-1 (or if you want any other encoding
specified in the fonts.dir, copy the description of 8859\-1 with
new name and use this new name for \f(CW\*(C`SRCENC\*(C'\fR and \f(CW\*(C`DSTENC\*(C'\fR).
.IP "\(bu" 2
\&\fB\f(CB\*(C`FOUNDRY\*(C'\fB\fR \- the foundry name to be used in the fonts.dir file. I have
set it to `fromttf' to avoid name conflicts with any existing font for
sure. But this foundry name is not registered in X11 standards and
if you want to get the full standard compliance or have a font server
that enforces such a compliance, use `misc'.
.PP
The next few parameters control the general behavior of the converter.
They default values are set to something reasonable.
.IP "\(bu" 2
\&\fB\f(CB\*(C`CORRECTWIDTH\*(C'\fB\fR \- if the value is set to \fB\f(CB\*(C`YES\*(C'\fB\fR then use the 
converter option \f(CW\*(C`\f(CB\-w\f(CW\*(C'\fR, otherwise don't use it. See the description of 
this option in the \s-1README\s0 file.
.IP "\(bu" 2
\&\fB\f(CB\*(C`REMOVET1A\*(C'\fB\fR \- if the value is set to \fB\f(CB\*(C`YES\*(C'\fB\fR then after
conversion remove the un-encoded \f(CW\*(C`.t1a\*(C'\fR font files and the 
intermediate \f(CW\*(C`.xpfa\*(C'\fR font metric files.
.IP "\(bu" 2
\&\fB\f(CB\*(C`INSTALLFONTMAP\*(C'\fB\fR \- a Ghostscript parameter, if the value is set to 
\&\fB\f(CB\*(C`YES\*(C'\fB\fR then install the entries for the new fonts
right into the main \f(CW\*(C`Fontmap\*(C'\fR file. Otherwise just leave
the file \f(CW\*(C`Fontmap.ttf\*(C'\fR in the Ghostscript configuration
directory.
.IP "\(bu" 2
\&\fB\f(CB\*(C`HINTSUBST\*(C'\fB\fR \- if the value is set to \fB\f(CB\*(C`YES\*(C'\fB\fR use the option
\&\f(CW\*(C`\f(CB\-H\f(CW\*(C'\fR, otherwise don't use it. This option enables the
hint substitution technique. If you have not installed the X11 patch
described above, use this option with great caution. See further 
description of this option in the \s-1README\s0 file.
.IP "\(bu" 2
\&\fB\f(CB\*(C`ENFORCEISO\*(C'\fB\fR \- if the value is set to \fB\f(CB\*(C`YES\*(C'\fB\fR then
disguise the resulting fonts as the fonts in ISOLatin1 encoding. Historically
this was neccessary due to the way the installer scripts created the
X11 font configuration files. It is not neccessary any more for this
purpose. But if you plan to use these fonts with some other application
that expects ISOLatin1 encoding then better enable this option.
.IP "\(bu" 2
\&\fB\f(CB\*(C`ALLGLYPHS\*(C'\fB\fR \- if the value is set to \fB\f(CB\*(C`YES\*(C'\fB\fR then
include all the glyphs from the source fonts into the resulting fonts, even
if these glyphs are inaccessible. If it's set to \fB\f(CB\*(C`NO\*(C'\fB\fR then
include only the glyphs which have codes assigned to them. The glyphs
without codes can not be used directly. But some clever programs,
such as the Type 1 library from XFree86 3.9 and higher can change
the encoding on the fly and use another set of glyphs. If you have not 
installed the X11 patch described above, use this option with great 
caution. See further description of the option option \f(CW\*(C`\f(CB\-a\f(CW\*(C'\fR in the 
\&\s-1README\s0 file.
.IP "\(bu" 2
\&\fB\f(CB\*(C`GENUID\*(C'\fB\fR \- if the value is set to \fB\f(CB\*(C`YES\*(C'\fB\fR then use
the option \f(CW\*(C`\f(CB\-uA\f(CW\*(C'\fR of the converter to generate UniqueIDs for
the converted fonts. The standard X11 Type 1 library does not use
this \s-1ID\s0, so it may only be neccessary for the other applications.
The script is clever enough to generate different UniqueID for the
same font converted to multiple encodings. Also after conversion it
checks all the fonts generacted during the session for duplicated
UniqueID and shows those. Still, this does not quarantee that these
UniqueIDs won't overlap with some other fonts. The UniqueIDs are
generated as hash values from the font names, so it's guaranteed
that if the `\f(CW\*(C`convert\*(C'\fR' script runs multiple times it will
generate the same UniqueIDs during each run. See further description 
of this option in the \s-1README\s0 file.
.IP "\(bu" 2
\&\fB\f(CB\*(C`GENUID\*(C'\fB\fR \- if the value is set to \fB\f(CB\*(C`YES\*(C'\fB\fR then create
the \f(CW\*(C`.pfb\*(C'\fR files, otherwise the \f(CW\*(C`.pfa\*(C'\fR files. The \f(CW\*(C`.pfb\*(C'\fR
files are more compact but contain binary data, so you may experience some
troubles when transferring them through the network.
.PP
The following parameters are used to locate the other scripts and
configuration files. By default the scripts do a bit of guessing for them:
they search in the \fBttf2pt1\fR installation directory if \fBttf2pt1\fR
was installed or otherwise suppose that you are running `\f(CW\*(C`convert\*(C'\fR' with
`\f(CW\*(C`scripts\*(C'\fR' subdirectory being the current directory.
.IP "\(bu" 2
\&\fB\f(CB\*(C`ENCDIR\*(C'\fB\fR \- directory containing the descriptions of encodings
.IP "\(bu" 2
\&\fB\f(CB\*(C`MAPDIR\*(C'\fB\fR \- directory containing the external map files
.PP
Besides that a few parameters are built into the `\f(CW\*(C`convert\*(C'\fR' script itself.
You probably won't need to change them:
.IP "\(bu" 2
\&\f(CW\*(C`\f(CBT1ASM\f(CW\*(C'\fR, \f(CW\*(C`\f(CB\s-1TTF2PT1\s0\f(CW\*(C'\fR, \f(CW\*(C`\f(CB\s-1TRANS\s0\f(CW\*(C'\fR, \f(CW\*(C`\f(CBT1FDIR\f(CW\*(C'\fR, \f(CW\*(C`\f(CB\s-1FORCEISO\s0\f(CW\*(C'\fR \- paths to the other script
.PP
Also there are a few parameters controlling the installation of
fonts for Ghostscript. Please look at their description in the 
Ghostscript section of documentation or in the \fB\f(BIttf2pt1_x2gs\fB\|(1)\fR
manual page before running `\f(CW\*(C`convert\*(C'\fR'. If these parameters are
set, `\f(CW\*(C`convert\*(C'\fR' will call the `\f(CW\*(C`x2gs\*(C'\fR' script automatically
to install the newly converted fonts in Ghostscript.
.PP
After creating the configuration file run the `\f(CW\*(C`convert\*(C'\fR' script. Look at
the result and the log file in \f(CW\*(C`DSTDIR\*(C'\fR.
.PP
Add the directory with newly converted fonts to the configuration
of X server or font server. For most of the systems this step is
very straightforward. For HP-UX it's rather tricky and poorly
documented, so the file \s-1FONTS\s0.hpux gives a short description.
.PP
If you don't have the privileges of the root user, you still can
configure your private font server. Just use some non-standard
port number (see \s-1FONTS\s0.hpux for an example, exept that you won't
need all the HP-related stuff on any other system).
.SH "FILES"
.IX Header "FILES"
.IP "\(bu" 2
TTF2PT1_SHAREDIR/scripts/convert.cfg.sample
.IP "\(bu" 2
TTF2PT1_SHAREDIR/scripts/*
.IP "\(bu" 2
\&\s-1TTF2PT1_SHAREDIR/README\s0
.IP "\(bu" 2
\&\s-1TTF2PT1_SHAREDIR/FONTS\s0
.IP "\(bu" 2
TTF2PT1_SHAREDIR/*
.IP "\(bu" 2
TTF2PT1_BINDIR/ttf2pt1
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
\&\fIttf2pt1\fR\|(1)
.IP "\(bu" 4
\&\fIttf2pt1_x2gs\fR\|(1)
.IP "\(bu" 4
\&\fIt1asm\fR\|(1)
.SH "BUGS"
.IX Header "BUGS"
.Sh "Known problems"
.IX Subsection "Known problems"
.IP "\(bu" 4
One catch is that the X11 Type 1 font library has a rather low limit
on the font size. Because of this the fonts with  more complicated
outlines and the enabled hint substitution may not fit into
this limit. The same applies to the fonts with very complicated
outlines or with very many glyphs (especially the fonts with
over 256 glyphs). So you will need to excercise caution with
these options if you plan using these fonts with X11. Some vendors 
such as \s-1HP\s0 provide the Type 1 implementation licensed from Adobe 
which should have no such problem.
.Sp
But there is a solution even for the generic X11. A patch located
in the subdirectory `\f(CW\*(C`app/X11\*(C'\fR' fixes this problem as well
as some other minor problems. Its description is provided in
app/X11/README.
.Sp
To fix the X11 font library, you have to get the X11 sources. I
can recommend the ftp sites of the XFree86 project ftp://ftp.xfree86.org
or of the Open Group ftp://ftp.x.org. This patch was made on the sources
of XFree86 so you may have better success with applying it to the
XFree86 distribution. After you have got the sources, make sure
that you can compile them. Then apply the patch as described.
Make sure that it was applied properly. Compile the sources again
(actually, you need only the fonts library, the fonts server, and
possibly the X server). It would be prudent now to save your old
font library, font server and, possibly, X server. Then install
the new recently compiled versions of these files. Of course,
if you know someone who already has compiled these files for the
same \s-1OS\s0 as yours, you can just copy the binary fles from him.
.Sp
Alas, building the X11 system from the source code is not the
easiest thing in the world and if you have no experience it
can be quite difficult. In this case just avoid the aforementioned
features or check each converted font to make sure that it
works properly.
.IP "\(bu" 4
The Type1 font library from the standard X11 distribution
does not work on HP-UX (at least, up to 10.01). The font server
supplied with HP-UX up to 10.01 is also broken. Starting from 
HP-UX 10.20 (I don't know about 10.10) they supply a proprietary font 
library and the converted fonts work fine with it, provided that
they are configured properly (see the file \s-1FONTS\s0.hpux).
.IP "\(bu" 4
The \f(CW\*(C`fonts.scale\*(C'\fR files created by the older versions of the
\&\f(CW\*(C`ttf2pt1\*(C'\fR installation program (up to release 3.1) have conflicted 
with the language definitions of the \f(CW\*(C`Xfsft\*(C'\fR font server and
parts of it included into XFree86. To overcome this incompatibility
the never versions creats the \f(CW\*(C`fonts.scale\*(C'\fR file describing all the
fonts as belonging to the \f(CW\*(C`adobe\-fontspecific\*(C'\fR encoding and
the \f(CW\*(C`fonts.alias\*(C'\fR file with the proper names. The drawback of
this solution is that \f(CW\*(C`xlsfonts\*(C'\fR gives the list of twice more
fonts. But as a side effect the option \f(CW\*(C`\f(CB\s-1ENFORCEISO\s0\f(CW\*(C'\fR in
`\f(CW\*(C`convert.cfg\*(C'\fR' is not required for X11 any more.
.IP "\(bu" 4
The conversion script has no support for Eastern multi-plane fonts.
Contribution of such a support would be welcome.

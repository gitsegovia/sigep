.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TTF2PT1 1"
.TH TTF2PT1 1 "December 31, 2003" "version 3.4.4" "TTF2PT1 Font Converter"
.SH "NAME"
TTF2PT1 \- A True Type to PostScript Type 1 Font Converter 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`ttf2pt1 \f(CI[\-options] ttffont.ttf [Fontname]\f(CW\*(C'\fR
.PP
or
.PP
\&\f(CW\*(C`ttf2pt1 \f(CI[\-options] ttffont.ttf \-\f(CW\*(C'\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Ttf2pt1 is a font converter from the True Type format (and some other formats
supported by the FreeType library as well) to the Adobe Type1 format.
.PP
The versions 3.0 and later got rather extensive post-processing algorithm that 
brings the converted fonts to the requirements of the Type1 standard, tries to
correct the rounding errors introduced during conversions and some simple
kinds of bugs that are typical for the public domain \s-1TTF\s0 fonts. It
also generates the hints that enable much better rendering of fonts in
small sizes that are typical for the computer displays. But everything
has its price, and some of the optimizations may not work well for certain
fonts. That's why the options were added to the converter, to control
the performed optimizations.
.SH "OPTIONS"
.IX Header "OPTIONS"
The first variant creates the file \f(CW\*(C`Fontname.pfa\*(C'\fR (or \f(CW\*(C`Fontname.pfb\*(C'\fR if the 
option '\fB\-b\fR' was used) with the converted font and \f(CW\*(C`Fontname.afm\*(C'\fR with the 
font metrics, the second one prints the font or another file (if the option
\&'\fB\-G\fR' was used) on the standard output from where it can be immediately
piped through some filter. If no \f(CW\*(C`Fontname\*(C'\fR is specified for the first
variant, the name is generated from \f(CW\*(C`ttffont\*(C'\fR by replacing the \f(CW\*(C`.ttf\*(C'\fR
filename suffix.
.PP
Most of the time no options are neccessary (with a possible exception
of '\fB\-e\fR'). But if there are some troubles with the resulting font, they 
may be used to control the conversion.
The \fBoptions\fR are:
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-a\f(CW\*(C'\fR \- Include all the glyphs from the source file into the converted
file. If this option is not specified then only the glyphs that have
been assigned some encoding are included, because the rest of glyphs
would be inaccessible anyway and would only consume the disk space. 
But some applications are clever enough to change the encoding on
the fly and thus use the other glyphs, in this case they could
benefit from using this option. But there is a catch: the X11 library
has rather low limit for the font size. Including more glyphs increases
the file size and thus increases the chance of hitting this limit.
See \f(CW\*(C`app/X11/README\*(C'\fR for the description of a 
patch to X11 which fixes this problem.
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-b\f(CW\*(C'\fR \- Encode the resulting font to produce a ready \f(CW\*(C`.pfb\*(C'\fR file.
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-d \f(CBsuboptions\f(CB\f(CW\*(C'\fR \- Debugging options. The suboptions are:
.Sp
\&\f(CW\*(C`\f(CBa\f(CW\*(C'\fR \- Print out the absolute coordinates of dots in outlines. Such
a font can not be used by any program (that's why this option is
incompatible with '\fB\-e\fR') but it has proven to be a valuable debuging 
information.
.Sp
\&\f(CW\*(C`\f(CBr\f(CW\*(C'\fR \- Do not reverse the direction of outlines. The \s-1TTF\s0 fonts have
the standard direction of outlines opposite to the Type1 fonts. So
they should be reversed during proper conversion. This option
may be used for debugging or to handle a \s-1TTF\s0 font with wrong
direction of outlines (possibly, converted in a broken way from
a Type1 font). The first signs of the wrong direction are the
letters like \*(L"P\*(R" or \*(L"B\*(R" without the unpainted \*(L"holes\*(R" inside.
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-e\f(CW\*(C'\fR \- Assemble the resulting font to produce a ready \f(CW\*(C`.pfa\*(C'\fR file.
.Sp
[ S.B.: Personally I don't think that this option is particularly useful.
The same result may be achieved by piping the unassembled data
through t1asm, the Type 1 assembler. And, anyways, it's good to
have the t1utils package handy. But Mark and many users think that 
this functionality is good and it took not much time to add this option. ]
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-F\f(CW\*(C'\fR \- Force the Unicode encoding: any type of \s-1MS\s0 encoding specified
in the font is ignored and the font is treated like it has Unicode
encoding. \fB\s-1WARNING:\s0\fR this option is intended for buggy fonts
which actually are in Unicode but are marked as something else. The
effect on the other fonts is unpredictable.
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-G \f(CBsuboptions\f(CB\f(CW\*(C'\fR \- File generation options. The suboptions may be lowercase 
or uppercase, the lowercase ones disable the generation of particular 
files, the corresponding uppercase suboptions enable the generation of the 
same kind of files. If the result of ttf2pt1 is requested to be printed on
the standard output, the last enabling suboption of \fB\-G\fR determines
which file will be written to the standard output and the rest of files
will be discarded. For example, \fB\-G A\fR will request the \s-1AFM\s0 file.
The suboptions to disable/enable the generation of the files are:
.Sp
\&\f(CW\*(C`\f(CBf/F\f(CW\*(C'\fR \- The font file. Depending on the other options this file
will have one of the suffixes \f(CW\*(C`.t1a\*(C'\fR, \f(CW\*(C`.pfa\*(C'\fR or \f(CW\*(C`.pfb\*(C'\fR. If the conversion result
is requested on the standard output ('\f(CW\*(C`\-\*(C'\fR' is used as the output file name)
then the font file will also be written there by default, if not overwritten
by another suboption of \fB\-G\fR.
\&\fBDefault: enabled\fR
.Sp
\&\f(CW\*(C`\f(CBa/A\f(CW\*(C'\fR \- The Adobe font metrics file (\f(CW\*(C`.afm\*(C'\fR).
\&\fBDefault: enabled\fR
.Sp
\&\f(CW\*(C`\f(CBe/E\f(CW\*(C'\fR \- The dvips encoding file (\f(CW\*(C`.enc\*(C'\fR).
\&\fBDefault: disabled\fR
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-l \f(CBlanguage\f(CB[+\f(CBargument\f(CB]\f(CW\*(C'\fR \- Extract the fonts for the specified language from a
multi-language Unicode font. If this option is not used the converter
tries to guess the language by the values of the shell variable \s-1LANG\s0.
If it is not able to guess the language by \s-1LANG\s0 it tries all the
languages in the order they are listed. 
.Sp
After the plus sign an optional argument for the language extractor
may be specified. The format of the argument is absolutely up to
the particular language converter. The primary purpose of the
argument is to support selection of planes for the multi-plane
Eastern encodings but it can also be used in any other way. The 
language extractor may decide to add the plane name in some form
to the name of the resulting font. None of the currently supported 
languages make any use of the argument yet.
.Sp
As of now the following languages are supported:
.Sp
\&\ \ \f(CW\*(C`latin1\*(C'\fR \- for all the languages using the Latin\-1 encoding
.Sp
\&\ \ \f(CW\*(C`latin2\*(C'\fR \- for the Central European languages
.Sp
\&\ \ \f(CW\*(C`latin4\*(C'\fR \- for the Baltic languages
.Sp
\&\ \ \f(CW\*(C`latin5\*(C'\fR \- for the Turkish language
.Sp
\&\ \ \f(CW\*(C`cyrillic\*(C'\fR \- for the languages with Cyrillic alphabet
.Sp
\&\ \ \f(CW\*(C`russian\*(C'\fR \- historic synonym for cyrillic
.Sp
\&\ \ \f(CW\*(C`bulgarian\*(C'\fR \- historic synonym for cyrillic
.Sp
\&\ \ \f(CW\*(C`adobestd\*(C'\fR \- for the AdobeStandard encoding used by TeX
.Sp
\&\ \ \f(CW\*(C`plane+\f(CIargument\f(CW\*(C'\fR \- to select one plane from a multi-byte encoding
.Sp
The argument of the "\f(CW\*(C`plane\*(C'\fR" language may be in one of three forms:
.Sp
\&\ \ \f(CW\*(C`plane+\f(CBpid=\f(CW\f(CI<pid>\f(CW\f(CB,eid=\f(CW\f(CI<eid>\f(CW\*(C'\fR
.Sp
\&\ \ \f(CW\*(C`plane+\f(CBpid=\f(CW\f(CI<pid>\f(CW\f(CB,eid=\f(CW\f(CI<eid>\f(CW\f(CB,\f(CW\f(CI<plane_number>\f(CW\*(C'\fR
.Sp
\&\ \ \f(CW\*(C`plane+\f(CI<plane_number>\f(CW\*(C'\fR
.Sp
Pid (\s-1TTF\s0 platform id) and eid (\s-1TTF\s0 encoding id) select a particular 
\&\s-1TTF\s0 encoding table in the original font. They are specified as decimal
numbers. If this particular encoding table is not present in the font
file then the conversion fails. The native (\*(L"ttf\*(R") front-end parser supports
only pid=3 (Windows platform), the FreeType-based (\*(L"ft\*(R") front-end supports 
any platform. If pid/eid is not specified then the \s-1TTF\s0 encoding table is 
determined as usual: Unicode encoding if it's first or an 8\-bit encoding
if not (and for an 8\-bit encoding the plane number is silently ignored). 
To prevent the converter from falling back to an 8\-bit encoding, specify
the Unicode pid/eid value explicitly.
.Sp
Plane_number is a hexadecimal (if starts with "\fB0x\fR\*(L") or decimal number.
It gives the values of upper bytes for which 256 characters will be 
selected. If not specified, defaults to 0. It is also used as a font
name suffix (the leading \*(R"0x" is not included into the suffix).
.Sp
\&\fB\s-1NOTE:\s0\fR
You may notice that the language names are not uniform: some are the
names of particular languages and some are names of encodings. This
is because of the different approaches. The original idea was to
implement a conversion from Unicode to the appropriate Windows
encoding for a given language. And then use the translation tables
to generate the fonts in whatever final encodings are needed. This
would allow to pile together the Unicode fonts and the non-Unicode
Windows fonts for that language and let the program to sort them out
automatically. And then generate fonts in all the possible encodings
for that language. An example of this approach is the Russian language
support. But if there is no multiplicity of encodings used for some 
languages and if the non-Unicode fonts are not considered important 
by the users, another way would be simpler to implement: just provide
only one table for extraction of the target encoding from Unicode
and don't bother with the translation tables. The latin* \*(L"languages\*(R"
are examples of this approach. If somebody feels that he needs the
Type1 fonts both in Latin\-* and Windows encodings he or she is absolutely
welcome to submit the code to implement it.
.Sp
\&\fB\s-1WARNING:\s0\fR
Some of the glyphs included into the AdobeStandard encoding are not
included into the Unicode standard. The most typical examples of such
glyphs are ligatures like 'fi', 'fl' etc. Because of this the font 
designers may place them at various places. The converter tries to
do its best, if the glyphs have honest Adobe names and/or are
placed at the same codes as in the Microsoft fonts they will be
picked up. Otherwise a possible solution is to use the option '\fB\-L\fR'
with an external map. 
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-L \f(CBfile\f(CB[+[pid=\f(CB<pid>\f(CB,eid=\f(CB<eid>\f(CB,][\f(CBplane\f(CB]]\f(CW\*(C'\fR \- Extract the fonts for the specified 
language from a multi-language font using the map from this file. This is
rather like the option '\fB\-l\fR' but the encoding map is not 
compiled into the program, it's taken from that file, so it's
easy to edit. Examples of such files are provided in 
\&\f(CW\*(C`maps/adobe\-standard\-encoding.map\*(C'\fR, \f(CW\*(C`CP1250.map\*(C'\fR. (\fB\s-1NOTE:\s0\fR
the 'standard encoding' map does not include all the glyphs of the 
AdobeStandard encoding, it's provided only as an example.) The 
description of the supported map formats is in the file 
\&\f(CW\*(C`maps/unicode\-sample.map\*(C'\fR.
.Sp
Likewise to '\fB\-l\fR', an argument may be specified after the map file
name. But in this case the argument has fixed meaning: it selects the 
original \s-1TTF\s0 encoding table (the syntax is the same as in '\fB\-l plane\fR')
and/or a plane of the map file. The plane name also gets added after dash 
to the font name. The plane is a concept used in the Eastern fonts with big 
number of glyphs: one \s-1TTF\s0 font gets divided into multiple Type1 fonts, 
each containing one plane of up to 256 glyphs. But with a little 
creativity this concept may be used for other purposes of combining 
multiple translation maps into one file.  To extract multiple planes 
from a \s-1TTF\s0 font \f(CW\*(C`ttf2pt1\*(C'\fR must be run multiple times, each time with 
a different plane name specified.
.Sp
The default original \s-1TTF\s0 encoding table used for the option '\fB\-L\fR' is
Unicode. The map files may include directives to specify different original 
\&\s-1TTF\s0 encodings. However if the pid/eid pair is specified with
it overrides any original encoding specified in the map file.
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-m \f(CBtype\f(CB=\f(CBvalue\f(CB\f(CW\*(C'\fR \- Set maximal or minimal limits of resources.
These limits control the the font generation by limiting the resources
that the font is permitted to require from the PostScript interpreter.
The currently supported types of limits are:
.Sp
\&\f(CW\*(C`\f(CBh\f(CW\*(C'\fR \- the maximal hint stack depth for the substituted hints. 
The default value is 128, according to the limitation in X11. This seems to
be the lowest (and thus the safest) widespread value. To display the
hint stack depth required by each glyph in a \f(CW\*(C`.t1a\*(C'\fR file use the script
\&\f(CW\*(C`scripts/cntstems.pl\*(C'\fR.
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-O \f(CBsuboptions\f(CB\f(CW\*(C'\fR \- Outline processing options. The suboptions
may be lowercase or uppercase, the lowercase ones disable the features,
the corresponding uppercase suboptions enable the same features.
The suboptions to disable/enable features are:
.Sp
\&\f(CW\*(C`\f(CBb/B\f(CW\*(C'\fR \- Guessing of the ForceBold parameter. This parameter helps
the Type1 engine to rasterize the bold fonts properly at small sizes.
But the algorithm used to guess the proper value of this flag makes
that guess based solely on the font name. In rare cases that may cause
errors, in these cases you may want to disable this guessing. 
\&\fBDefault: enabled\fR
.Sp
\&\f(CW\*(C`\f(CBh/H\f(CW\*(C'\fR \- Autogeneration of hints. The really complex outlines
may confuse the algorithm, so theoretically it may be useful
sometimes to disable them. Although up to now it seems that
even bad hints are better than no hints at all.
\&\fBDefault: enabled\fR
.Sp
\&\f(CW\*(C`\f(CBu/U\f(CW\*(C'\fR \- Hint substitution. Hint substitution is a technique 
permitting generation of more detailed hints for the rasterizer. It allows 
to use different sets of hints for different parts of a glyph and change 
these sets as neccessary during rasterization (that's why \*(L"substituted\*(R").  
So it should improve the quality of the fonts rendered at small sizes.  
But there are two catches: First, the X11 library has rather low limit for 
the font size. More detailed hints increase the file size and thus increase 
the chance of hitting this limit (that does not mean that you shall hit it
but you may if your fonts are particularly big). This is especially 
probable for Unicode fonts converted with option '\fB\-a\fR', so you may want to 
use '\fB\-a\fR' together with '\fB\-Ou\fR'. See \f(CW\*(C`app/X11/README\*(C'\fR for the description of 
a patch to X11 which fixes this problem. Second, some rasterizers (again,
X11 is the typical example) have a limitation for total number of hints
used when drawing a glyph (also known as the hint stack depth). If that
stack overflows the glyph is ignored. Starting from version 3.22 \f(CW\*(C`ttf2pt1\*(C'\fR
uses algorithms to minimizing this depth, with the trade-off of slightly
bigger font files. The glyphs which still exceed the limit set by option
\&'\fB\-mh\fR' have all the substituted hints removed and only base hints left.
The algorithms seem to have been refined far enough to make the fonts with
substituted hints look better than the fonts without them or at least the 
same. Still if the original fonts are not well-designed the detailed 
hinting may emphasize the defects of the design, such as non-even thickness 
of lines. So provided that you are not afraid of the X11 bug the best idea 
would be to generate a font with this feature and without it, then compare 
the results using the program \f(CW\*(C`other/cmpf\*(C'\fR (see the description 
in \f(CW\*(C`other/README\*(C'\fR) and decide which one looks better.
\&\fBDefault: enabled\fR
.Sp
\&\f(CW\*(C`\f(CBo/O\f(CW\*(C'\fR \- Space optimization of the outlines' code. This kind of optimization
never hurts, and the only reason to disable this feature is for comparison 
of the generated fonts with the fonts generated by the previous versions of 
converter. Well, it _almost_ never hurts. As it turned out there exist
some brain-damaged printers which don't understand it. Actually this
feature does not change the outlines at all. The Type 1 font manual 
provides a set of redundant operators that make font description shorter,
such as '10 hlineto' instead of '0 10 rlineto' to describe a horizontal
line. This feature enables use of these operators.
\&\fBDefault: enabled\fR
.Sp
\&\f(CW\*(C`\f(CBs/S\f(CW\*(C'\fR \- Smoothing of outlines. If the font is broken in some
way (even the ones that are not easily noticeable), such smoothing 
may break it further. So disabling this feature is the first thing to be 
tried if some font looks odd. But with smoothing off the hint generation
algorithms may not work properly too.
\&\fBDefault: enabled\fR
.Sp
\&\f(CW\*(C`\f(CBt/T\f(CW\*(C'\fR \- Auto-scaling to the 1000x1000 Type1 standard matrix. The
\&\s-1TTF\s0 fonts are described in terms of an arbitrary matrix up to
4000x4000. The converted fonts must be scaled to conform to
the Type1 standard. But the scaling introduces additional rounding
errors, so it may be curious sometimes to look at the font in its
original scale.
\&\fBDefault: enabled\fR
.Sp
\&\f(CW\*(C`\f(CBv/V\f(CW\*(C'\fR \- Do vectorization on the bitmap fonts. Functionally
\&\*(L"vectorization\*(R" is the same thing as \*(L"autotracing\*(R", a different word is
used purely to differentiate it from the Autotrace library. It tries to
produce nice smooth outlines from bitmaps. This feature is still a work
in progress though the results are already mostly decent.
\&\fBDefault: disabled\fR
.Sp
\&\f(CW\*(C`\f(CBw/W\f(CW\*(C'\fR \- Glyphs' width corection. This option is designed to be
used on broken fonts which specify too narrow widths for the 
letters. You can tell that a font can benefit from this option
if you see that the characters are smashed together without
any whitespace between them. This option causes the converter
to set the character widths to the actual width of this character
plus the width of a typical vertical stem. But on the other hand
the well-designed fonts may have characters that look better if
their widths are set slightly narrower. Such well-designed fonts
will benefit from disabling this feature. You may want to convert
a font with and without this feature, compare the results and
select the better one. This feature may be used only on proportional
fonts, it has no effect on the fixed-width fonts.
\&\fBDefault: disabled\fR
.Sp
\&\f(CW\*(C`\f(CBz/Z\f(CW\*(C'\fR \- Use the Autotrace library on the bitmap fonts. The results 
are horrible and \fBthe use of this option is not recommended\fR. This option is 
present for experimental purposes. It may change or be removed in the
future. The working tracing can be achieved with option \f(CW\*(C`\f(CB\-OV\f(CW\*(C'\fR.
\&\fBDefault: disabled\fR
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-p \f(CBparser_name\f(CB\f(CW\*(C'\fR \- Use the specified front-end parser to read the font file.
If this option is not used, ttf2pt1 selects the parser automatically based
on the suffix of the font file name, it uses the first parser in its
list that supports this font type. Now two parsers are supported:
.Sp
\&\ \ \f(CW\*(C`ttf\*(C'\fR \- built-in parser for the ttf files (suffix \f(CW\*(C`.ttf\*(C'\fR)
.Sp
\&\ \ \f(CW\*(C`bdf\*(C'\fR \- built-in parser for the \s-1BDF\s0 files (suffix \f(CW\*(C`.bdf\*(C'\fR)
.Sp
\&\ \ \f(CW\*(C`ft\*(C'\fR \- parser based on the FreeType\-2 library (suffixes \f(CW\*(C`.ttf\*(C'\fR,
\&\f(CW\*(C`.otf\*(C'\fR, \f(CW\*(C`.pfa\*(C'\fR, \f(CW\*(C`.pfb\*(C'\fR)
.Sp
The parser \f(CW\*(C`ft\*(C'\fR is \fB\s-1NOT\s0\fR linked in by default. See \f(CW\*(C`Makefile\*(C'\fR
for instructions how to enable it. We do no support this parser on
Windows: probably it will work but nobody tried and nobody knows how
to build it. 
.Sp
The conversion of the bitmap fonts (such as \s-1BDF\s0) is simplistic yet,
producing jagged outlines.  When converting such fonts, it might be 
a good idea to turn off the hint substitution (using option \fB\-Ou\fR) 
because the hints produced will be huge but not adding much to the
quality of the fonts.
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-u \f(CBnumber\f(CB\f(CW\*(C'\fR \- Mark the font with this value as its
UniqueID. The UniqueID is used by the printers with the hard disks
to cache the rasterized characters and thus significantly
speed-up the printing. Some of those printers just can't
store the fonts without UniqueID on their disk.The problem
is that the \s-1ID\s0 is supposed to be unique, as it name says. And
there is no easy way to create a guaranteed unique \s-1ID\s0. Adobe specifies
the range 4000000\-4999999 for private IDs but still it's difficult
to guarantee the uniqueness within it. So if you don't really need the 
UniqueID don't use it, it's optional. Luckily there are a few millions of 
possible IDs, so the chances of collision are rather low. 
If instead of the number a special value '\f(CW\*(C`\f(CBA\f(CW\*(C'\fR' is given
then the converter generates the value of UniqueID automatically,
as a hash of the font name. (\fB\s-1NOTE:\s0\fR  in the version 3.22 the
algorithm for autogeneration of UniqueID was changed to fit the values
into the Adobe-spacified range. This means that if UniqueIDs were used 
then the printer's cache may need to be flushed before replacing the 
fonts converted by an old version with fonts converted by a newer version).
A simple way to find if any of the fonts in a given directory have
duplicated UniqueIDs is to use the command:
.Sp
\&\f(CW\*(C`\ \ cat *.pf[ab] | grep UniqueID | sort | uniq \-c | grep \-v ' 1 '\*(C'\fR
.Sp
Or if you use \f(CW\*(C`scripts/convert\*(C'\fR it will do that for you automatically 
plus it will also give the exact list of files with duplicate UIDs.
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-v \f(CBsize\f(CB\f(CW\*(C'\fR \- Re-scale the font to get the size of a typical uppercase
letter somewhere around the specified size. Actually, it re-scales
the whole font to get the size of one language-dependent letter to be
at least of the specified size. Now this letter is \*(L"A\*(R" in all the
supported languages. The size is specified in the points of the
Type 1 coordinate grids, the maximal value is 1000. This is an
experimental option and should be used with caution. It tries to
increase the visible font size for a given point size and thus make
the font more readable. But if overused it may cause the fonts to
look out of scale. As of now the interesting values of size for
this option seem to be located mostly between 600 and 850. This
re-scaling may be quite useful but needs more experience to
understand the balance of its effects.
.IP "\(bu" 2
\&\f(CW\*(C`\f(CB\-W \f(CBlevel\f(CB\f(CW\*(C'\fR \- Select the verbosity level of the warnings.
Currently the levels from 0 to 4 are supported. Level 0 means no warnings
at all, level 4 means all the possible warnings. The default level is 3.
Other levels may be added in the future, so using the level number 99 is
recommended to get all the possible warnings. Going below level 2 is
not generally recommended because you may miss valuable information about
the problems with the fonts being converted.
.IP "\(bu" 2
\&\fBObsolete option:\fR
\&\f(CW\*(C`\f(CB\-A\f(CW\*(C'\fR \- Print the font metrics (.afm file) instead of the font on \s-1STDOUT\s0.
Use \fB\-GA\fR instead.
.IP "\(bu" 2
\&\fBVery obsolete option:\fR
.Sp
The algorithm that implemented the forced fixed width had major
flaws, so it was disabled. The code is still in the program and
some day it will be refined and returned back. Meanwhile the 
option name '\fB\-f\fR' was reused for another option. The old version was:
.Sp
\&\f(CW\*(C`\f(CB\-f\f(CW\*(C'\fR \- Don't try to force the fixed width of font. Normally the converter
considers the fonts in which the glyph width deviates by not more
than 5% as buggy fixed width fonts and forces them to have really
fixed width. If this is undesirable, it can be disabled by this option.
.PP
The \f(CW\*(C`.pfa\*(C'\fR font format supposes that the description of the characters
is binary encoded and encrypted. This converter does not encode or
encrypt the data by default, you have to specify the option '\fB\-e\fR'
or use the \f(CW\*(C`t1asm\*(C'\fR program to assemble (that means, encode and
encrypt) the font program. The \f(CW\*(C`t1asm\*(C'\fR program that is included with
the converter is actually a part of the \f(CW\*(C`t1utils\*(C'\fR package, rather old
version of which may be obtained from
.PP
http://ttf2pt1.sourceforge.net/t1utils.tar.gz
.PP
Note that \f(CW\*(C`t1asm\*(C'\fR from the old version of that package won't work properly
with the files generated by \f(CW\*(C`ttf2pt1\*(C'\fR version 3.20 and later. Please use
\&\f(CW\*(C`t1asm\*(C'\fR packaged with \f(CW\*(C`ttf2pt1\*(C'\fR or from the new version \f(CW\*(C`t1utils\*(C'\fR
instead. For a newer version of \f(CW\*(C`t1utils\*(C'\fR please look at
.PP
http://www.lcdf.org/~eddietwo/type/
.SH "EXAMPLES"
.IX Header "EXAMPLES"
So, the following command lines:
.PP
\&\f(CW\*(C`ttf2pt1 \-e ttffont.ttf t1font\*(C'\fR
.PP
\&\f(CW\*(C`ttf2pt1 ttffont.ttf \- | t1asm >t1font.pfa\*(C'\fR
.PP
represent two ways to get a working font. The benefit of the second form 
is that other filters may be applied to the font between the converter
and assembler.
.SH "FILES"
.IX Header "FILES"
.IP "\(bu" 2
TTF2PT1_LIBXDIR/t1asm
.IP "\(bu" 2
TTF2PT1_SHAREDIR/*
.IP "\(bu" 2
TTF2PT1_SHAREDIR/scripts/*
.IP "\(bu" 2
TTF2PT1_SHAREDIR/other/*
.IP "\(bu" 2
\&\s-1TTF2PT1_SHAREDIR/README\s0
.IP "\(bu" 2
\&\s-1TTF2PT1_SHAREDIR/FONTS\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
\&\fIttf2pt1_convert\fR\|(1)
.IP "\(bu" 4
\&\fIttf2pt1_x2gs\fR\|(1)
.IP "\(bu" 4
\&\fIt1asm\fR\|(1)
.IP "\(bu" 4
ttf2pt1\-announce@lists.sourceforge.net
.Sp
The mailing list with announcements about ttf2pt1. It is a moderated mailing
with extremely low traffic. Everyone is encouraged to subscribe to keep in 
touch with the current status of project. To subscribe use the Web interface
at http://lists.sourceforge.net/mailman/listinfo/ttf2pt1\-announce.
If you have only e\-mail access to the Net then send a subscribe request to 
the development mailing list ttf2pt1\-devel@lists.sourceforge.net and somebody
will help you with subscription.
.IP "\(bu" 4
ttf2pt1\-devel@lists.sourceforge.net
.Sp
ttf2pt1\-users@lists.sourceforge.net
.Sp
The ttf2pt1 mailing lists for development and users issues. They have not
that much traffic either. To subscribe use the Web interface at
http://lists.sourceforge.net/mailman/listinfo/ttf2pt1\-devel
and http://lists.sourceforge.net/mailman/listinfo/ttf2pt1\-users.
If you have only e\-mail access to the Net then send a subscribe request to 
the development mailing list ttf2pt1\-devel@lists.sourceforge.net and somebody
will help you with subscription.
.IP "\(bu" 4
http://ttf2pt1.sourceforge.net
.Sp
The main page of the project.
.Sp
http://www.netspace.net.au/~mheath/ttf2pt1/
.Sp
The old main page of the project.
.SH "BUGS"
.IX Header "BUGS"
It seems that many Eastern fonts use features of the \s-1TTF\s0 format that are 
not supported by the ttf2pt1's built-in front-end parser. Because of
this for now we recommend using the FreeType-based parser (option
\&'\fB\-p ft\fR') with the "\f(CW\*(C`plane\*(C'\fR" language.
.Sh "Troubleshooting and bug reports"
.IX Subsection "Troubleshooting and bug reports"
Have problems with conversion of some font ? The converter dumps core ? Or your
printer refuses to understand the converted fonts ? Or some characters are 
missing ? Or some characters look strange ?
.PP
Send the bug reports to the ttf2pt1 development mailing list at
ttf2pt1\-devel@lists.sourceforge.net.
.PP
Try to collect more information about the problem and include it into
the bug report. (Of course, even better if you would provide a ready
fix, but just a detailed bug report is also good). Provide detailed
information about your problem, this will speed up the response greatly.
Don't just write \*(L"this font looks strange after conversion\*(R" but describe
what's exactly wrong with it: for example, what characters look wrong
and what exactly is wrong about their look. Providing a link to the
original font file would be also a good idea. Try to do a little
troublehooting and report its result. This not only would help with
the fix but may also give you a temporary work-around for the bug.
.PP
First, enable full warnings with option '\fB\-W99\fR', save them to
a file and read carefully. Sometimes the prolem is with a not implemented
feature which is reported in the warnings. Still, reporting about such
problems may be a good idea: some features were missed to cut corners,
in hope that no real font is using them. So a report about a font using
such a feature may motivate someone to implement it. Of course, you
may be the most motivated person: after all, you are the one wishing
to convert that font. ;\-) Seriously, the philosophy \*(L"scrath your own itch\*(R"
seems to be the strongest moving force behind the Open Source software.
.PP
The next step is playing with the options. This serves a dual purpose:
on one hand, it helps to localize the bug, on the other hand you may be
able to get a working version of the font for the meantime while the
bug is being fixed. The typical options to try out are: first '\fB\-Ou\fR', if
it does not help then '\fB\-Os\fR', then '\fB\-Oh\fR', then '\fB\-Oo\fR'.
They are described in a bit more detail above. Try them one by one
and in combinations. See if with them the resulting fonts look better.
.PP
On some fonts ttf2pt1 just crashes. Commonly that happens because the
font being converted is highly defective (although sometimes the bug
is in ttf2pt1 itself). In any case it should not crash, so the reports
about such cases will help to handle these defects properly in future.
.PP
We try to respond to the bug reports in a timely fashion but alas, this 
may not always be possible, especially if the problem is complex.
This is a volunteer project and its resources are limited. Because
of this we would appreciate bug reports as detailed as possible,
and we would appreciate the ready fixes and contributions even more.
.SH "HISTORY"
.IX Header "HISTORY"
Based on ttf2pfa by Andrew Weeks, and help from Frank Siegert.
.PP
Modification by Mark Heath.
.PP
Further modification by Sergey Babkin.
.PP
The Type1 assembler by I. Lee Hetherington with modifications by 
Kai-Uwe Herbing.
